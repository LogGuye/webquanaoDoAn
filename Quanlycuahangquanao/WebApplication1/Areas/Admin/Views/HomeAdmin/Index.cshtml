@using System.Linq;
@model WebApplication1.ViewModels.AdminDashboardViewModel
@{
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    ViewBag.Title = "Bảng điều khiển";
}

<div class="container-fluid py-4">
    <div class="row g-4">
        <!-- Tổng doanh thu -->
        <div class="col-sm-6 col-md-4">
            <div class="card text-center h-100">
                <div class="card-body">
                    <i class="bi bi-currency-dollar fs-2 mb-2"></i>
                    <h3>@String.Format("{0:N0}₫", Model.TotalRevenue)</h3>
                    <p>Tổng doanh thu</p>
                    <small>Tháng này: @String.Format("{0:N0}₫", Model.MonthlyRevenue)</small>
                </div>
            </div>
        </div>
        <!-- Khách hàng -->
        <div class="col-sm-6 col-md-4">
            <div class="card text-center h-100">
                <div class="card-body">
                    <i class="bi bi-people-fill fs-2 mb-2"></i>
                    <h3>@Model.TotalCustomers</h3>
                    <p>Khách hàng</p>
                    <small>Tháng này: @Model.MonthlyCustomers</small>
                </div>
            </div>
        </div>
        <!-- Đơn hàng -->
        <div class="col-sm-6 col-md-4">
            <div class="card text-center h-100">
                <div class="card-body">
                    <i class="bi bi-cart-check fs-2 mb-2"></i>
                    <h3>@Model.TotalOrders</h3>
                    <p>Đơn hàng</p>
                    <small>Tháng này: @Model.MonthlyOrders</small>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <!-- Biểu đồ cột -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Doanh thu 4 năm gần nhất</h5>
                    @if (Model.RevenueByYear != null && Model.RevenueByYear.Values.Any(v => v > 0))
                    {
                        <canvas id="revenueChart"></canvas>
                    }
                    else
                    {
                        <p class="text-muted">Chưa có dữ liệu doanh thu để vẽ biểu đồ.</p>
                    }
                </div>
            </div>
        </div>

        <!-- Biểu đồ tròn -->
        <div class="col-md-6 mb-4">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">Sản phẩm theo chủ đề</h5>
                    <canvas id="categoryChart"></canvas>
                    <div class="mt-2">
                        @if (Model.CategoryProductCounts.Any())
                        {
                            var colors = new[] { "#007bff", "#28a745", "#ffc107", "#dc3545", "#6c757d" };
                            var idx = 0;
                            foreach (var kv in Model.CategoryProductCounts)
                            {
                                <span class="badge rounded-pill me-2"
                                      style="background-color:@colors[idx % colors.Length]">
                                    @kv.Key (@kv.Value)
                                </span>;
                                idx++;
                            }
                        }
                        else
                        {
                            <p class="text-muted">Chưa có dữ liệu danh mục.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
    // Bar chart
    var revCtx = document.getElementById('revenueChart').getContext('2d');
    new Chart(revCtx, {
        type: 'bar',
        data: {
            labels: [@String.Join(",", Model.RevenueByYear.Keys.Select(y => "'" + y + "'"))],
            datasets: [{
                label: 'Doanh thu',
                data: [@String.Join(",", Model.RevenueByYear.Values)],
                backgroundColor: 'rgba(54, 162, 235, 0.6)'
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: { beginAtZero: true, ticks: { callback: function(v){ return v.toLocaleString() + '₫'; } } }
            },
            plugins: {
                tooltip: { callbacks: { label: function(ctx){ return ctx.parsed.y.toLocaleString() + '₫'; } } }
            }
        }
    });

    // Pie chart
    var catCtx = document.getElementById('categoryChart').getContext('2d');
    new Chart(catCtx, {
        type: 'pie',
        data: {
            labels: [@String.Join(",", Model.CategoryProductCounts.Keys.Select(k => "'" + k + "'"))],
            datasets: [{
                data: [@String.Join(",", Model.CategoryProductCounts.Values)],
                backgroundColor: ['#007bff','#28a745','#ffc107','#dc3545','#6c757d']
            }]
        },
        options: { responsive: true, plugins: { legend: { position: 'bottom' } } }
    });
    </script>
}
